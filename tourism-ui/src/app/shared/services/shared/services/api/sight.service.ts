
/**
 * Sample Api
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import {Inject, Injectable, Optional}                      from '@angular/core';
import {Http, Headers, URLSearchParams}                    from '@angular/http';
import {RequestMethod, RequestOptions, RequestOptionsArgs} from '@angular/http';
import {Response, ResponseContentType}                     from '@angular/http';

import {Observable}                                        from 'rxjs/Observable';
import '../rxjs-operators';

// import { MapSights } from '../model/mapSights';
import {MediaSights} from '../model/mediaSights';
import {SightDescription} from '../model/sightDescription';
// import { SquareId } from '../model/squareId';

import {BASE_PATH, COLLECTION_FORMATS}                     from '../variables';
import {Configuration}                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */



@Injectable()
export class SightService {

  protected basePath = 'http://localhost:10010/api/v1';
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  private extendObj<T1, T2>(objA: T1, objB: T2) {
    for (let key in objB) {
      if (objB.hasOwnProperty(key)) {
        (objA as any)[key] = (objB as any)[key];
      }
    }
    return <T1 & T2>objA;
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (let consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  public getMediaSightDescriptionWithHttpInfo(sightId: string, authToken?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/sights/${sightId}'
        .replace('${' + 'sightId' + '}', String(sightId));

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    // verify required parameter 'sightId' is not null or undefined
    if (sightId === null || sightId === undefined) {
      throw new Error('Required parameter sightId was null or undefined when calling getMediaSightDescription.');
    }
    if (authToken !== undefined) {
      queryParameters.set('authToken', <any>authToken);
    }


    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];


    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  public getMediaSightDescription(sightId: string, authToken?: string, extraHttpRequestParams?: any): Observable<SightDescription> {
    return this.getMediaSightDescriptionWithHttpInfo(sightId, authToken, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  public getMediaSightsWithHttpInfo(sightIds?: string, page?: string, authToken?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + '/sights';

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

    if (sightIds !== undefined) {
      queryParameters.set('sightIds', <any>sightIds);
    }

    if (page !== undefined) {
      queryParameters.set('page', <any>page);
    }

    if (authToken !== undefined) {
      queryParameters.set('authToken', <any>authToken);
    }


    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];


    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters,
      withCredentials: this.configuration.withCredentials
    });
    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  public getMediaSights(sightIds?: string, page?: string, authToken?: string, extraHttpRequestParams?: any): Observable<MediaSights> {
    return this.getMediaSightsWithHttpInfo(sightIds, page, authToken, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }
}
